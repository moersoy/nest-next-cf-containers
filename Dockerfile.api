# Cloudflare Containers Optimized - NestJS API (Standalone-style)

# 1. Builder Stage: Build the application
FROM node:20-alpine AS builder

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@latest

# Copy the application source code first
COPY ./api .

# Install ALL dependencies (including devDependencies for building)
# This is less cache-efficient but more robust for standalone builds.
RUN pnpm install --no-frozen-lockfile

# Build the application
RUN pnpm run build


# 2. Production Stage: Create the final, lean image
FROM node:20-alpine AS production

WORKDIR /app

# Install pnpm and dumb-init
RUN npm install -g pnpm@latest
RUN apk add --no-cache dumb-init curl

# Create a non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nestjs -u 1001

# Copy package.json and install only production dependencies
COPY --from=builder /app/package.json ./
RUN pnpm install --prod --no-frozen-lockfile

# Copy only the production-ready build artifacts from the builder stage
COPY --from=builder --chown=nestjs:nodejs /app/dist ./dist

# Final ownership change and user switch
RUN chown -R nestjs:nodejs /app
USER nestjs

# Health check endpoint
HEALTHCHECK --interval=10s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Expose the port the app runs on
EXPOSE 3000

# Set environment variables for production
ENV NODE_ENV=production
ENV PORT=3000

# Use dumb-init to start the app, ensuring proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/main.js"]
