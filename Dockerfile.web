# Cloudflare Containers Optimized - Next.js Web (Standalone-style)

# 1. Builder Stage: Build the application
FROM node:20-alpine AS builder

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@latest

# Copy web app source code
COPY ./web .

# Install dependencies
RUN pnpm install --no-frozen-lockfile

# Build the application
# This will generate the .next/standalone directory thanks to output: 'standalone' in next.config.js
RUN pnpm run build

# 2. Production Stage: Create the final, lean image from the standalone output
FROM node:20-alpine AS production

WORKDIR /app

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init curl

# Create a non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy the standalone Next.js server and its dependencies
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone .

# Copy the public and static assets
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Switch to the non-root user
USER nextjs

# Health check endpoint
HEALTHCHECK --interval=10s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/ || exit 1

# Expose the port the app runs on
EXPOSE 3001

# Set environment variables for production
ENV NODE_ENV=production
ENV PORT=3001
ENV NEXT_TELEMETRY_DISABLED=1

# Use dumb-init to start the standalone server
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server.js"]
